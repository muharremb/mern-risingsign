#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
var debug = require('debug')('backend:server');
const mongoose = require('mongoose');
const {mongoURI: db} = require('../config/keys');

// const debug = require('debug');
// const serverLogger = debug('backend:server');
// const dbLogger = debug('backend:mongodb');

var http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

let chatServer
/**
 * Listen on provided port, on all network interfaces.
 */
 mongoose
 .connect(db, { useNewUrlParser: true })
 .then(() => {
  debug("Connected to MongoDB successfully");
  chatServer = server.listen(port, () => {
    console.log(`socket server is listening ;)`);
    console.log(`CHAT SERVER:${chatServer} `);
    setUpChatServer();
  })
 })
 .catch(err => debug(err));


const setUpChatServer = () => {
  const io = require('socket.io')(chatServer, {
    pingTimeout: 600000,
    cors: {
      origin: 'http://localhost:3000'
    }
  })
  io.on('connection', (socket) => {
    console.log("connected to the socket slut")

    socket.on("setup", (userId) => {
      socket.join(userId);
      console.log(`userId is motherfucking: ${userId}`)
      socket.emit("connected");
    })

    socket.on('join-chat', (room) => {
      socket.join(room);
      console.log("User joined room" +  room)
    })
  })
}

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
